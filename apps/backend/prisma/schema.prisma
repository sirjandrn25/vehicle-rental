datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "../src/zod"
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                  String                  @id @default(cuid())
  email               String                  @unique
  email_verified      Boolean                 @default(false)
  role                UserRole                @default(USER)
  name                String?
  avatar_url          String?
  github_username     String?
  password            String?                 @default("")
  keys                UserKey[]
  memberships         TeamMembership[]
  verification_tokens UserVerificationToken[]
  one_time_passwords  UserOneTimePassword[]
  folders             Folder[]
}

// model UserSession {
//   id             String @id @default(cuid())
//   user_id        String
//   active_expires BigInt
//   idle_expires   BigInt
//   user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

//   @@index([user_id])
// }

model UserKey {
  id              String  @id @default(cuid())
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model UserVerificationToken {
  id      String   @id @default(cuid())
  user_id String
  user    User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
  token   String
  expires DateTime

  @@index([user_id])
}

enum UserOneTimePasswordType {
  SIGNUP
  LOGIN
  PASSWORD_RESET
}

model UserOneTimePassword {
  id         String                  @id @default(cuid())
  user_id    String
  user       User                    @relation(references: [id], fields: [user_id], onDelete: Cascade)
  code       String
  type       UserOneTimePasswordType
  identifier String
  expires    DateTime

  @@index([user_id])
}

model Team {
  id           String           @id @default(cuid())
  name         String
  slug         String           @unique
  memberships  TeamMembership[]
  subscription Subscription?
  invitations  TeamInvitation[]
}

enum TeamMemberRole {
  MEMBER
  OWNER
}

model TeamMembership {
  id         String         @id @default(cuid())
  team       Team           @relation(fields: [team_id], references: [id], onDelete: Cascade)
  team_id    String
  user       User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
  role       TeamMemberRole @default(MEMBER)
  is_creator Boolean        @default(false)

  @@unique([team_id, user_id])
}

model TeamInvitation {
  id        String         @id @default(cuid())
  team      Team           @relation(fields: [team_id], references: [id], onDelete: Cascade)
  team_id   String
  email     String
  role      TeamMemberRole @default(MEMBER)
  createdAt DateTime       @default(now())
  expiresAt DateTime       @updatedAt

  @@unique([team_id, email])
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAUSED
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
  EXPIRED
}

model Subscription {
  id                String             @id
  team              Team               @relation(fields: [team_id], references: [id])
  team_id           String             @unique
  customer_id       String
  status            SubscriptionStatus
  plan_id           String
  variant_id        String
  next_payment_date DateTime?
}

model Folder {
  id   String @id @default(cuid())
  name String

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  parent_id String?
  parent    Folder?  @relation("childrens", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childrens Folder[] @relation("childrens")

  created_at DateTime? @default(now())
  files      File[]

  @@unique([user_id, name, parent_id])
}

model File {
  id  String @id @default(cuid())
  url String

  folder_id String
  folder    Folder @relation(fields: [folder_id], references: [id])

  created_at DateTime? @default(now())
}
